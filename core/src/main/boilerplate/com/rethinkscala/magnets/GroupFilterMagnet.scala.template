package com.rethinkscala.magnets

import com.rethinkscala.FilterTyped


object GroupFilterMagnet {




     [#def lift[[#T1#]](tuple: ([#FilterReceptacle[T1]#])) = new GroupFilterMagnet[([#T1#])]{
          override def apply() = Seq([#tuple._1.apply#])
        }#]


    [#implicit def magnetGF[[#T1, F1 <% FilterReceptacle[T1]#]](tuple: Tuple1[[#F1#]]): GroupFilterMagnet[([#T1#])] = {
      val input: ([#FilterReceptacle[T1]#]) = ([#tuple._1#])
      lift(input)
    } #]


}

sealed trait GroupFilterMagnet[T] {
  type Result


  def apply(): Seq[FilterTyped]
}
