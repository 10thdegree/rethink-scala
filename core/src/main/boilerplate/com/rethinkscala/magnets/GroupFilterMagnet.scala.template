package com.rethinkscala.magnets

import com.rethinkscala.FilterTyped


object GroupFilterMagnet {




  implicit def magnetGF(value:String):GroupFilterMagnet[String] = new GroupFilterMagnet[String]{
    val fr = new FieldFilterReceptacle[String](value)
    override def apply() = Seq(fr.apply)
  }

  implicit def magnetGF[T,F <% FilterReceptacle[T]](fr:F):GroupFilterMagnet[T] = new GroupFilterMagnet[T]{
                                                                                                       override def apply() = Seq(fr.apply)
                                                                                               }



    [#implicit def magnetGF[[#T1, F1 <% FilterReceptacle[T1]#]](tuple: Tuple1[[#F1#]]): GroupFilterMagnet[([#T1#])] = {
      val input:Tuple1[[#FilterReceptacle[T1]#]] = Tuple1([#tuple._1#])

       new GroupFilterMagnet[([#T1#])]{
                override def apply() = Seq([#input._1.apply#])
        }
    }#
    ]



}

sealed trait GroupFilterMagnet[T] {
  type Result


  def apply(): Seq[FilterTyped]
}
